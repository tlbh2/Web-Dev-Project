section 16: The Document Object Model DOM
	116. Intro to DOM model
		- methods are thing that objects can do, has to be associated with an object
	120. The Separation of Concerns: Structure vs Style vs Behaviour
		- html is for content only, CSS for styling, and Javascript for behavior
	121. Text Manipulation and the Text Content Property
		- things that go inside JavaScript function in console has to be a string "string" for it to understand

Section 24: Express.js with Node.js
	203. HTTP Requests
		- Request Vocab
			+ GET: request resource, send 1 thing
			+ POST: Sending resource, send multiple things
			+ PUT: Replace resource, replace everything
			+ PATCH: Patch up a resource, can change only one thing
			+ DELETE: Delete resource
		- make sure to choose Git Bash as command terminal
		- "npm i -g nameOfPackage" -g indicate that the packet will be install globally on the computer
		- req = request : sending sth to server-side
		- res = respond : sending sth to client-side
	206. Custome Middleware
		- Pre-processing: body-parser
		- authenthication
		- logging : morgan
		- error

Section 25: EJS
	209. What is EJS?
		- when run, it will automatically find folder "views" then look for index.ejs
		- when have index.ejs, dont include html file in the folder if not the page will load but it's blank
	210. EJS tags
		- footer.ejs and header.ejs need to be in the same folder as index.ejs which is "views" in order for it to work
	211.
		- when "nodemon" or "node index.js" and the browser keep loading but nothing appear then check the app.get in index.js wether there is any content exist .
		- in Express, you can only send one response per request. Using two or more will throw an error.
	212. EJS partials and layouts
		- app.use(express.static("public"));  //link up static file such as images,css (if not working as intended, try deleting the "/" before "public")

Section 30: Build Your Own Api
	235. Creating GET Routes
		 var id = parseInt(req.params.id);
		 var content = jokes.find((joke) => (joke.id === id));
		- id on the left of the === is attribute from list "jokes", id on the right is var id on top

Section 33: MongoDB
	250. MongoDB CRUD operations in the shell: Create
		- https://www.mongodb.com/docs/manual/crud/
	255. Working with the Native MongoDB Driver
		- https://mongodb.github.io/node-mongodb-native/3.5/quick-start/quick-start/

Section 35: Put everything together
	264. Let's take the ToDoList Project to the Next Level and Connect it with Mongoose
		- when connect to mongodb database, make sure the link is "mongodb://127.0.0.1:27017/todolistDB" not "mongodb://localhost:27017/todolistDB"
		- double check on ip address 127.0.0.1:27017 and cross checking it on command prompt after running "mongosh"
		- mongoose.connect("mongodb://127.0.0.1:27017/todolistDB");
	265. Rendering Database Items in the ToDoList App
		- in case when refreshing a webpage and default items keep adding to the list on the webpage, check "todolist-v2-starting-files", at the app.get function
	267. Deleting Items from our ToDoList Database
		- add "onChange="this.form.submit()" to <input> when ticking a checkbox = submit form
		- sometime it only need to stop the port Ctrl+C and then node the app again when error persist
	270. Revisiting Lodash and Deleting Items from Custom ToDo Lists
		- <input> has attribute [value] and [type = "hidden"] in case I wanna pass more input value in a <form>
		- Mongoose delete an array element in docmuent and save (check delete function and its post route in todolistv2)

Section 36: Deploying your web application
	-host database on mongodb Atlas, webpage on 
	- on mongodb Atlas, username: tinlao, password: laotrungtin

Section 37: Authentication and Security
	- Encryption level:	
		level 1. username and password only
		level 2. encryption to password field
		level 3. hashing password with md5
		level 4. salting and hashing passwords with bcrypt
		level 5. Using Passport.js to Add Cookies and Sessions
	- new package for encryption and authentication: mongoose-encryption
		+ in case only wanted to do encryption on certain data such as password, add "encryptedFields: ["password"]" at the end of plugin for encrypt
	- new package for environment variable file 
		+ Error: Authentication code missing (Mongoose-encryption)
			https://stackoverflow.com/questions/61316947/error-authentication-code-missing-mongoose-encryption
	- new package for hashing: md5

Section 38: React.js
	302. Introduction to JSX and Babel
		- <div id="root"></div> everything created with React will be inserted inside this div
	